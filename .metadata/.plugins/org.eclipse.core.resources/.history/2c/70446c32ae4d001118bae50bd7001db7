/*
 * Strat-game PC-Server :
 * 
 * Code : Frédéric Meslin, Florent Touchard, Benjamin Blois
 * Released on 29/01/12 at 15h00 for the 4th GGJ
 * 
 * This program and all its resources included is
 * published under the Creative common license By-NC 3.0.
 * 
 * For more informations :
 * http://creativecommons.org/licenses/by-nc/3.0/
 */

package globalgamejam.org.strat;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.List;

public class Server {

	// Global server constants
	private static final int SERVER_PORT = 50000;
	private static final int MAX_CLIENTS = 6;
	private static final int SERVER_TIMEOUT = 100;

	// Internal objects
	private Game game = null;
	private List<ClientCom> clients = null;
	private Connection connection = null;

	// Server constructor
	public Server(Game game) {
		super();
		this.game = game;
		clients = new ArrayList<ClientCom>();
	}

	/**************************************************************************/
	public void startConnection() {
		System.out.println("Server : awaiting client connections");
		connection = new Connection();
		connection.start();

	}

	public void stopConnection() {
		if (connection != null)
			connection.end();
	}

	/**************************************************************************/
	public void startCommunication() {
		System.out.println("Server : starting communication");
		for (int i = 0; i < clients.size(); i++) {
			ClientCom client = clients.get(i);
			client.start();
		}
	}

	public void stopCommunication() {
		for (int i = 0; i < clients.size(); i++) {
			ClientCom client = clients.get(i);
			client.end();
		}
	}

	/**************************************************************************/
	public void startGame(int nb) {
		for (int i = 0; i < clients.size(); i++) {
			ClientCom client = clients.get(i);
			client.startGame(nb);
		}
		System.out.println("Server : starting game");
	}

	public void endGame(int iD, boolean winner) {
		ClientCom client = clients.get(iD);
		client.endGame(winner);
		System.out.println("Server : player " + Player.names[iD]
				+ (winner ? " won !" : " lost !"));
	}

	public void disconnectClient(int iD) {
		for (int i = 0; i < clients.size(); i++) {
			ClientCom client = clients.get(i);
			client.disconnect(iD);
		}
		System.out.println("Server : removing client iD = " + iD);
	}

	public void updateClient(int iD, int stones, int actions) {
		ClientCom client = clients.get(iD);
		client.update(stones, actions);
	}

	public void bonusClient(int iD, int bonus) {
		ClientCom client = clients.get(iD);
		client.obtainBonus(bonus);
	}

	/**************************************************************************/
	private class Connection extends Thread {

		// Connection wizard is running
		private boolean running = false;

		/**************************************************************************/
		public void start() {
			running = true;
			super.start();
		}

		public void end() {
			if (!running)
				return;
			running = false;
			try {
				this.join();
			} catch (Exception ex) {
			}
		}

		/**************************************************************************/
		public void run() {
			ServerSocket serverSocket;
			// Open the server listener socket
			try {
				serverSocket = new ServerSocket(SERVER_PORT);
				serverSocket.setSoTimeout(SERVER_TIMEOUT);
				System.out.println("Server : listening on port = " + SERVER_PORT);
			} catch (IOException ex) {
				System.out.println("Server : unable to open listener socket "
						+ ex.getLocalizedMessage());
				System.exit(-1);
				return;
			}
			// Listen to client connections
			while (running) {
				// Wait for new clients
				try {
					Socket socket = serverSocket.accept();
					socket.setSoTimeout(SERVER_TIMEOUT);
					if (clients.size() < MAX_CLIENTS) {
						// Store the new client
						int iD = clients.size();
						clients.add(new ClientCom(iD, socket));
						game.connect(iD);
						System.out.println("Server : adding client iD = " + iD);
					}else{
						// Refuse the client
						System.out.println("Server : refusing client, server full !");
						socket.close();
					}
				} catch (SocketTimeoutException to) {
				} catch (Exception ex) {
					System.out.println("Server : connection problem " + ex.getLocalizedMessage());
				}
				// Check clients connection state
				for (int iD = 0; iD < clients.size(); iD++) {
					ClientCom client = clients.get(iD);
					// Ask for presence
					if (!client.sensing()) {
						clients.remove(iD);
						game.disconnect(iD);
						System.out.println("Server : removing client iD = "
								+ iD);
						iD--;
					}
				}
			}
			// Close the server socket
			try {serverSocket.close();} catch(IOException ex) {}
		}
	}
}

