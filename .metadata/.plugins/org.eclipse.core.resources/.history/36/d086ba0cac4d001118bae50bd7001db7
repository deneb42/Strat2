/*
 * Strat-game PC-Server :
 * 
 * Code : Fr�d�ric Meslin, Florent Touchard, Benjamin Blois
 * Released on 29/01/12 at 15h00 for the 4th GGJ
 * 
 * This program and all its resources included is
 * published under the Creative common license By-NC 3.0.
 * 
 * For more informations :
 * http://creativecommons.org/licenses/by-nc/3.0/
 */

package globalgamejam.org.strat;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.net.SocketTimeoutException;

public class Client extends Thread {

		// Client attributes
		private int iD;
		private Socket socket = null;
		private boolean running = false;

		/**************************************************************************/
		public ClientCom(int iD, Socket client) {
			this.iD = iD;
			this.socket = client;
		}

		/**************************************************************************/
		public void start() {
			running = true;
			super.start();
		}

		public void end() {
			if (!running)
				return;
			running = false;
			try {
				this.join();
			} catch (Exception ex) {
			}
		}

		/**************************************************************************/
		private int readNoWait(InputStream istream) throws IOException {
			while (running) {
				int data;
				try {
					data = istream.read();
				} catch (SocketTimeoutException ex) {
					continue;
				}
				if (data < 0)
					throw new IOException();
				return data;
			}
			throw new IOException();
		}

		/**************************************************************************/
		public void run() {
			try {
				// Open the input stream
				InputStream istream = socket.getInputStream();
				while (running) {
					int bonus, to, from;
					// Get message packet
					int cmd = readNoWait(istream);
					// Interpret the message
					switch (cmd) {
					case STEAL_STONE:
						to = readNoWait(istream);
						if (to >= clients.size())
							break;
						game.stealStone(iD, to);
						break;
					case GIVE_STONE:
						to = readNoWait(istream);
						if (to >= clients.size())
							break;
						game.giveStone(iD, to);
						break;
					case USE_BONUS:
						bonus = readNoWait(istream);
						from = readNoWait(istream);
						to = readNoWait(istream);
						if (to > clients.size() || from > clients.size())
							break;
						game.useBonus(iD, bonus, from, to);
						break;
					}
				}
			} catch (IOException io) {
				running = false;
			}
			// Signal client disconnection
			try {socket.close();} catch (IOException ex){};
			disconnectClient(iD);
		}

		/**************************************************************************/
		public void startGame(int nb) {
			if (!running)
				return;
			try {
				OutputStream ostream = socket.getOutputStream();
				// Prepare the message
				byte message[] = new byte[3];
				message[0] = START_GAME;
				message[1] = (byte) iD;
				message[2] = (byte) nb;
				// Send the message
				ostream.write(message);
			} catch (IOException io) {
				end();
			}
		}

		public void endGame(boolean winner) {
			if (!running)
				return;
			try {
				OutputStream ostream = socket.getOutputStream();
				// Prepare the message
				byte message[] = new byte[2];
				message[0] = END_GAME;
				message[1] = (byte) (winner ? 1 : 0);
				// Send the message
				ostream.write(message);
			} catch (IOException io) {
				end();
			}
		}

		public void obtainBonus(int bonus) {
			if (!running)
				return;
			try {
				OutputStream ostream = socket.getOutputStream();
				// Prepare the message
				byte message[] = new byte[2];
				message[0] = OBTAIN_BONUS;
				message[1] = (byte) bonus;
				// Send the message
				ostream.write(message);
			} catch (IOException io) {
				end();
			}
		}

		public void update(int stones, int actions) {
			if (!running)
				return;
			try {
				OutputStream ostream = socket.getOutputStream();
				// Prepare the message
				byte message[] = new byte[4];
				message[0] = STONE_QUANTITY;
				message[1] = (byte) stones;
				message[2] = ACTION_GAUGE;
				message[3] = (byte) actions;
				// Send the message
				ostream.write(message);
			} catch (IOException io) {
				end();
			}
		}

		/**************************************************************************/
		public boolean sensing() {
			try {
				OutputStream ostream = socket.getOutputStream();
				ostream.write(SENSING);
			} catch (IOException io) {
				return false;
			}
			return true;
		}

		public void disconnect(int iD) {
			if (!running)
				return;
			try {
				// Create the output stream
				OutputStream ostream = socket.getOutputStream();
				// Prepare the message
				byte message[] = new byte[2];
				message[0] = DISCONNECT;
				message[1] = (byte) iD;
				// Send the message
				ostream.write(message);
			} catch (IOException io) {
				end();
			}
		}
	}
}
